<Activity mc:Ignorable="sap sap2010" x:Class="Check_No_of_Certs" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=System.Private.CoreLib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=System.Private.CoreLib" xmlns:str="clr-namespace:System.Text.RegularExpressions;assembly=System.Text.RegularExpressions" xmlns:uasc="clr-namespace:UiPath.Activities.System.Collections;assembly=UiPath.System.Activities" xmlns:uascf="clr-namespace:UiPath.Activities.System.Collections.Filters;assembly=UiPath.System.Activities" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:upap="clr-namespace:UiPath.PDF.Activities.PDF;assembly=UiPath.PDF.Activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="in_IPAFFSCertificateReference" Type="InArgument(x:String)" />
    <x:Property Name="out_dictCertPageRanges" Type="OutArgument(scg:Dictionary(x:String, scg:List(x:Int32)))" />
    <x:Property Name="in_PhytoCertFilepath" Type="InArgument(x:String)" />
  </x:Members>
  <VisualBasic.Settings>
    <x:Null />
  </VisualBasic.Settings>
  <sap2010:WorkflowViewState.IdRef>Check_No_of_Certs_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>GlobalVariablesNamespace</x:String>
      <x:String>GlobalConstantsNamespace</x:String>
      <x:String>UiPath.PDF.Activities</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>System.ComponentModel</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>System.Xml.Serialization</x:String>
      <x:String>UiPath.UIAutomationNext.Models.ExtractData</x:String>
      <x:String>UiPath.UIAutomationNext.Enums</x:String>
      <x:String>UiPath.UIAutomationCore.Contracts</x:String>
      <x:String>UiPath.UIAutomationNext.Activities</x:String>
      <x:String>UiPath.Shared.Activities</x:String>
      <x:String>UiPath.Platform.ObjectLibrary</x:String>
      <x:String>System.Text.RegularExpressions</x:String>
      <x:String>System.Linq.Expressions</x:String>
      <x:String>UiPath.Platform.ResourceHandling</x:String>
      <x:String>UiPath.IntelligentOCR.StudioWeb.Activities.PDF.ExtractPDFPageRange</x:String>
      <x:String>UiPath.IntelligentOCR.StudioWeb.Activities.PDF</x:String>
      <x:String>UiPath.PDF.Activities.PDF</x:String>
      <x:String>System.Numerics</x:String>
      <x:String>UiPath.Activities.System.Collections</x:String>
      <x:String>UiPath.Activities.System.Collections.Filters</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.Collections</AssemblyReference>
      <AssemblyReference>System.ComponentModel.TypeConverter</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.Common</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Drawing.Common</AssemblyReference>
      <AssemblyReference>System.Drawing.Primitives</AssemblyReference>
      <AssemblyReference>System.Linq</AssemblyReference>
      <AssemblyReference>System.Net.Mail</AssemblyReference>
      <AssemblyReference>System.ObjectModel</AssemblyReference>
      <AssemblyReference>System.Private.CoreLib</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Workflow</AssemblyReference>
      <AssemblyReference>UiPath.Studio.Constants</AssemblyReference>
      <AssemblyReference>UiPath.PDF.Activities</AssemblyReference>
      <AssemblyReference>System.Reflection.DispatchProxy</AssemblyReference>
      <AssemblyReference>System.Reflection.TypeExtensions</AssemblyReference>
      <AssemblyReference>System.Reflection.Metadata</AssemblyReference>
      <AssemblyReference>System.ComponentModel.EventBasedAsync</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>System.ComponentModel</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Primitives</AssemblyReference>
      <AssemblyReference>System.Private.ServiceModel</AssemblyReference>
      <AssemblyReference>System.Private.DataContractSerialization</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Formatters</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Primitives</AssemblyReference>
      <AssemblyReference>System.Private.Xml</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationNext</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationCore</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationNext.Activities</AssemblyReference>
      <AssemblyReference>UiPath.DocumentUnderstanding.ML.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Testing.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Database.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Word.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Persistence.Activities</AssemblyReference>
      <AssemblyReference>UiPath.OCR.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Mail.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Form.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Web.Activities</AssemblyReference>
      <AssemblyReference>UiPath.IntelligentOCR.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Platform</AssemblyReference>
      <AssemblyReference>System.Text.RegularExpressions</AssemblyReference>
      <AssemblyReference>System.Memory.Data</AssemblyReference>
      <AssemblyReference>UiPath.Word.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities.Design</AssemblyReference>
      <AssemblyReference>System.Console</AssemblyReference>
      <AssemblyReference>System.Security.Permissions</AssemblyReference>
      <AssemblyReference>System.Configuration.ConfigurationManager</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>System.Private.Uri</AssemblyReference>
      <AssemblyReference>System.Linq.Async</AssemblyReference>
      <AssemblyReference>System.Collections.NonGeneric</AssemblyReference>
      <AssemblyReference>System.Linq.Expressions</AssemblyReference>
      <AssemblyReference>UiPath.IntelligentOCR.StudioWeb.Activities</AssemblyReference>
      <AssemblyReference>System.Runtime.Numerics</AssemblyReference>
      <AssemblyReference>System.Linq.Async.Queryable</AssemblyReference>
      <AssemblyReference>System.Linq.Parallel</AssemblyReference>
      <AssemblyReference>System.Collections.Immutable</AssemblyReference>
      <AssemblyReference>System.Linq.Queryable</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <Sequence DisplayName="Check_No_of_Certs" sap:VirtualizedContainerService.HintSize="2298,6614" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="x:Int32" Name="intTotalPages" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <Sequence DisplayName="Check No of Certs" sap:VirtualizedContainerService.HintSize="706,6591" sap2010:WorkflowViewState.IdRef="Sequence_2">
      <Sequence.Variables>
        <Variable x:TypeArguments="x:String" Name="strPdfPath" />
        <Variable x:TypeArguments="x:String" Name="strPageText" />
        <Variable x:TypeArguments="x:String" Name="strPageRange" />
        <Variable x:TypeArguments="scg:List(x:String)" Name="listIPAFFSPhytoCertNos" />
        <Variable x:TypeArguments="scg:List(x:String)" Name="listPDFPhytoCertNos" />
      </Sequence.Variables>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <upap:GetPDFPageCount DisplayName="Get PDF Page Count" FileName="[in_PhytoCertFilepath]" sap:VirtualizedContainerService.HintSize="672,115" sap2010:WorkflowViewState.IdRef="GetPDFPageCount_1" PageCount="[intTotalPages]" />
      <Assign DisplayName="Initialise Dictionary" sap:VirtualizedContainerService.HintSize="672,115" sap2010:WorkflowViewState.IdRef="Assign_5">
        <Assign.To>
          <OutArgument x:TypeArguments="scg:Dictionary(x:String, scg:List(x:Int32))">[out_dictCertPageRanges]</OutArgument>
        </Assign.To>
        <Assign.Value>
          <InArgument x:TypeArguments="scg:Dictionary(x:String, scg:List(x:Int32))">[New Dictionary(Of String, List(Of Int32))()]</InArgument>
        </Assign.Value>
      </Assign>
      <Sequence DisplayName="Extract Cert Numbers from IPAFFs" sap:VirtualizedContainerService.HintSize="672,1143" sap2010:WorkflowViewState.IdRef="Sequence_19">
        <Sequence.Variables>
          <Variable x:TypeArguments="scg:IEnumerable(str:Match)" Name="ieIPAFFSPhytoCertNos" />
        </Sequence.Variables>
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
        <ui:Matches FirstMatch="{x:Null}" DisplayName="Find IPAFFs Cert Numbers" sap:VirtualizedContainerService.HintSize="450,92" sap2010:WorkflowViewState.IdRef="Matches_5" Input="[in_IPAFFSCertificateReference]" IsBuilderTabModified="False" Pattern="[0-9]{9}" RegexOption="IgnoreCase, Compiled" Result="[ieIPAFFSPhytoCertNos]" />
        <If Condition="[ieIPAFFSPhytoCertNos.Count = 0]" DisplayName="No IPAFFS Phyto Numbers?" sap:VirtualizedContainerService.HintSize="450,480" sap2010:WorkflowViewState.IdRef="If_5">
          <If.Then>
            <Sequence DisplayName="Then" sap:VirtualizedContainerService.HintSize="416,226" sap2010:WorkflowViewState.IdRef="Sequence_24">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="382,166" sap2010:WorkflowViewState.IdRef="LogMessage_3" Level="Warn" Message="[&quot;Add logic for: On hold - Document marked as Phyto Certificate has an invalid Reference Number&quot;]" />
            </Sequence>
          </If.Then>
          <If.Else>
            <Sequence DisplayName="Else" sap:VirtualizedContainerService.HintSize="416,83" sap2010:WorkflowViewState.IdRef="Sequence_25">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
            </Sequence>
          </If.Else>
        </If>
        <Assign DisplayName="Initialise List" sap:VirtualizedContainerService.HintSize="450,115" sap2010:WorkflowViewState.IdRef="Assign_16">
          <Assign.To>
            <OutArgument x:TypeArguments="scg:List(x:String)">[listIPAFFSPhytoCertNos]</OutArgument>
          </Assign.To>
          <Assign.Value>
            <InArgument x:TypeArguments="scg:List(x:String)">[New List(Of String)]</InArgument>
          </Assign.Value>
        </Assign>
        <ui:ForEach x:TypeArguments="str:Match" CurrentIndex="{x:Null}" DisplayName="For Each Cert Number" sap:VirtualizedContainerService.HintSize="450,364" sap2010:WorkflowViewState.IdRef="ForEach`1_5" Values="[ieIPAFFSPhytoCertNos]">
          <ui:ForEach.Body>
            <ActivityAction x:TypeArguments="str:Match">
              <ActivityAction.Argument>
                <DelegateInArgument x:TypeArguments="str:Match" Name="currentMatch" />
              </ActivityAction.Argument>
              <Sequence DisplayName="Body" sap:VirtualizedContainerService.HintSize="416,226" sap2010:WorkflowViewState.IdRef="Sequence_20">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <uasc:AppendItemToCollection x:TypeArguments="x:String" Collection="[listIPAFFSPhytoCertNos]" DisplayName="Append Items to Collection" sap:VirtualizedContainerService.HintSize="382,166" sap2010:WorkflowViewState.IdRef="AppendItemToCollection`1_1">
                  <uasc:AppendItemToCollection.Items>
                    <scg:List x:TypeArguments="InArgument(x:String)" Capacity="4">
                      <InArgument x:TypeArguments="x:String">[currentMatch.Value]</InArgument>
                    </scg:List>
                  </uasc:AppendItemToCollection.Items>
                </uasc:AppendItemToCollection>
              </Sequence>
            </ActivityAction>
          </ui:ForEach.Body>
        </ui:ForEach>
      </Sequence>
      <Sequence DisplayName="Extract Cert Numbers from PDF" sap:VirtualizedContainerService.HintSize="672,1373" sap2010:WorkflowViewState.IdRef="Sequence_14">
        <Sequence.Variables>
          <Variable x:TypeArguments="x:String" Name="strFullPDFText" />
          <Variable x:TypeArguments="scg:IEnumerable(str:Match)" Name="iePDFPhytoCertNos" />
        </Sequence.Variables>
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
        <ui:ReadPDFText DisplayName="Read PDF Text" FileName="[in_PhytoCertFilepath]" sap:VirtualizedContainerService.HintSize="450,115" sap2010:WorkflowViewState.IdRef="ReadPDFText_2" PreserveFormatting="True" Range="All" Text="[strFullPDFText]" />
        <ui:Matches FirstMatch="{x:Null}" BuilderPattern="No\.\s*EC\s*NL\s*/\s*(PCNU\s*\d+)" DisplayName="Find PDF Cert Numbers" sap:VirtualizedContainerService.HintSize="450,92" sap2010:WorkflowViewState.IdRef="Matches_4" Input="[strFullPDFText]" IsBuilderTabModified="True" Model="[{&quot;Index&quot;:0,&quot;OperationID&quot;:&quot;ADV&quot;,&quot;OperationName&quot;:&quot;Advanced&quot;,&quot;OperationValue&quot;:&quot;No\\.\\s*EC\\s*NL\\s*\/\\s*(PCNU\\s*\\d+)&quot;,&quot;QuantifierFirstValue&quot;:&quot;1&quot;,&quot;QuantifierID&quot;:&quot;EXT&quot;,&quot;QuantifierName&quot;:&quot;Exactly&quot;,&quot;QuantifierSecondValue&quot;:null}]" Pattern="No\.\s*EC\s*NL\s*/\s*(PCNU\s*\d+)" RegexOption="IgnoreCase, Compiled" Result="[iePDFPhytoCertNos]" />
        <If Condition="[iePDFPhytoCertNos.Count = 0]" DisplayName="No PDF Phyto Numbers?" sap:VirtualizedContainerService.HintSize="450,480" sap2010:WorkflowViewState.IdRef="If_4">
          <If.Then>
            <Sequence DisplayName="Then" sap:VirtualizedContainerService.HintSize="416,226" sap2010:WorkflowViewState.IdRef="Sequence_22">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="382,166" sap2010:WorkflowViewState.IdRef="LogMessage_2" Level="Warn" Message="[&quot;Add logic for: On hold - Document marked as Phyto Certificate contains no identifiable reference number&quot;]" />
            </Sequence>
          </If.Then>
          <If.Else>
            <Sequence DisplayName="Else" sap:VirtualizedContainerService.HintSize="416,83" sap2010:WorkflowViewState.IdRef="Sequence_23">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
            </Sequence>
          </If.Else>
        </If>
        <Assign DisplayName="Initialise List" sap:VirtualizedContainerService.HintSize="450,115" sap2010:WorkflowViewState.IdRef="Assign_19">
          <Assign.To>
            <OutArgument x:TypeArguments="scg:List(x:String)">[listPDFPhytoCertNos]</OutArgument>
          </Assign.To>
          <Assign.Value>
            <InArgument x:TypeArguments="scg:List(x:String)">[New List(Of String)]</InArgument>
          </Assign.Value>
        </Assign>
        <ui:ForEach x:TypeArguments="str:Match" CurrentIndex="{x:Null}" DisplayName="For Each Cert Number" sap:VirtualizedContainerService.HintSize="450,373" sap2010:WorkflowViewState.IdRef="ForEach`1_6" Values="[iePDFPhytoCertNos]">
          <ui:ForEach.Body>
            <ActivityAction x:TypeArguments="str:Match">
              <ActivityAction.Argument>
                <DelegateInArgument x:TypeArguments="str:Match" Name="currentMatch" />
              </ActivityAction.Argument>
              <Sequence DisplayName="Body" sap:VirtualizedContainerService.HintSize="416,226" sap2010:WorkflowViewState.IdRef="Sequence_26">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <uasc:AppendItemToCollection x:TypeArguments="x:String" Collection="[listPDFPhytoCertNos]" DisplayName="Append Items to Collection" sap:VirtualizedContainerService.HintSize="382,166" sap2010:WorkflowViewState.IdRef="AppendItemToCollection`1_2">
                  <uasc:AppendItemToCollection.Items>
                    <scg:List x:TypeArguments="InArgument(x:String)" Capacity="4">
                      <InArgument x:TypeArguments="x:String">[currentMatch.Groups(1).ToString]</InArgument>
                    </scg:List>
                  </uasc:AppendItemToCollection.Items>
                </uasc:AppendItemToCollection>
              </Sequence>
            </ActivityAction>
          </ui:ForEach.Body>
        </ui:ForEach>
        <Assign DisplayName="Remove Duplicate Values" sap:VirtualizedContainerService.HintSize="450,106" sap2010:WorkflowViewState.IdRef="Assign_20">
          <Assign.To>
            <OutArgument x:TypeArguments="scg:List(x:String)">[listPDFPhytoCertNos]</OutArgument>
          </Assign.To>
          <Assign.Value>
            <InArgument x:TypeArguments="scg:List(x:String)">[listPDFPhytoCertNos.Distinct.ToList]</InArgument>
          </Assign.Value>
        </Assign>
      </Sequence>
      <ui:ForEach x:TypeArguments="x:String" CurrentIndex="{x:Null}" DisplayName="For Each PDF Cert Number" sap:VirtualizedContainerService.HintSize="672,1508" sap2010:WorkflowViewState.IdRef="ForEach`1_4" Values="[listPDFPhytoCertNos]">
        <ui:ForEach.Body>
          <ActivityAction x:TypeArguments="x:String">
            <ActivityAction.Argument>
              <DelegateInArgument x:TypeArguments="x:String" Name="CertificateNumber" />
            </ActivityAction.Argument>
            <Sequence DisplayName="Body - For Each PDF Cert Number" sap:VirtualizedContainerService.HintSize="638,1361" sap2010:WorkflowViewState.IdRef="Sequence_12">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <ui:ForEach x:TypeArguments="x:Int32" CurrentIndex="{x:Null}" DisplayName="For Each i in intTotalPages - Loop Around All PDF Pages" sap:VirtualizedContainerService.HintSize="604,1301" sap2010:WorkflowViewState.IdRef="ForEach`1_1" Values="[Enumerable.Range(1, intTotalPages)]">
                <ui:ForEach.Body>
                  <ActivityAction x:TypeArguments="x:Int32">
                    <ActivityAction.Argument>
                      <DelegateInArgument x:TypeArguments="x:Int32" Name="i" />
                    </ActivityAction.Argument>
                    <Sequence DisplayName="Body - For Each i in intTotalPages" sap:VirtualizedContainerService.HintSize="570,1163" sap2010:WorkflowViewState.IdRef="Sequence_5">
                      <Sequence.Variables>
                        <Variable x:TypeArguments="x:String" Name="strPhytoCert" />
                        <Variable x:TypeArguments="scg:IEnumerable(str:Match)" Name="iePageMatches" />
                        <Variable x:TypeArguments="x:String" Name="strTidyCertificateNumber" />
                      </Sequence.Variables>
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <ui:ReadPDFText DisplayName="Read PDF Page Text" FileName="[in_PhytoCertFilepath]" sap:VirtualizedContainerService.HintSize="536,115" sap2010:WorkflowViewState.IdRef="ReadPDFText_1" PreserveFormatting="True" Range="[i.ToString]" Text="[strPageText]" />
                      <ui:Matches FirstMatch="{x:Null}" sap2010:Annotation.AnnotationText="Check extracted page text for the current Certificate Number" BuilderPattern="PCNU 323826750" DisplayName="Find Phyto Cert Number in extracted text" sap:VirtualizedContainerService.HintSize="536,136" sap2010:WorkflowViewState.IdRef="Matches_3" Input="[strPageText]" IsBuilderTabModified="True" Model="[{&quot;Index&quot;:0,&quot;OperationID&quot;:&quot;LIT&quot;,&quot;OperationName&quot;:&quot;Literal&quot;,&quot;OperationValue&quot;:&quot;PCNU 323826750&quot;,&quot;QuantifierFirstValue&quot;:&quot;1&quot;,&quot;QuantifierID&quot;:&quot;EXT&quot;,&quot;QuantifierName&quot;:&quot;Exactly&quot;,&quot;QuantifierSecondValue&quot;:null}]" Pattern="[CertificateNumber]" RegexOption="IgnoreCase, Compiled" Result="[iePageMatches]">
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                      </ui:Matches>
                      <If Condition="[iePageMatches.Count &lt;&gt; 0]" DisplayName="Certificate Number Found?" sap:VirtualizedContainerService.HintSize="536,852" sap2010:WorkflowViewState.IdRef="If_1">
                        <If.Then>
                          <Sequence DisplayName="Then" sap:VirtualizedContainerService.HintSize="502,600" sap2010:WorkflowViewState.IdRef="Sequence_7">
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                            <Assign DisplayName="Assign strTidyCertificateNumber" sap:VirtualizedContainerService.HintSize="468,115" sap2010:WorkflowViewState.IdRef="Assign_21">
                              <Assign.To>
                                <OutArgument x:TypeArguments="x:String">[strTidyCertificateNumber]</OutArgument>
                              </Assign.To>
                              <Assign.Value>
                                <InArgument x:TypeArguments="x:String">[iePageMatches(0).Value.Replace("PCNU ","")]</InArgument>
                              </Assign.Value>
                            </Assign>
                            <If Condition="[out_dictCertPageRanges.ContainsKey(strTidyCertificateNumber)]" DisplayName="If dictIdentifiers contains cert number" sap:VirtualizedContainerService.HintSize="468,425" sap2010:WorkflowViewState.IdRef="If_2">
                              <If.Then>
                                <InvokeMethod DisplayName="Add page to dict" sap:VirtualizedContainerService.HintSize="238.5,136" sap2010:WorkflowViewState.IdRef="InvokeMethod_3" MethodName="Add">
                                  <InvokeMethod.TargetObject>
                                    <InArgument x:TypeArguments="scg:List(x:Int32)">[out_dictCertPageRanges(strTidyCertificateNumber)]</InArgument>
                                  </InvokeMethod.TargetObject>
                                  <InArgument x:TypeArguments="x:Int32">[i]</InArgument>
                                </InvokeMethod>
                              </If.Then>
                              <If.Else>
                                <Assign DisplayName="Assign new dictIdentifiers" sap:VirtualizedContainerService.HintSize="434,83" sap2010:WorkflowViewState.IdRef="Assign_12">
                                  <Assign.To>
                                    <OutArgument x:TypeArguments="scg:List(x:Int32)">[out_dictCertPageRanges(strTidyCertificateNumber)]</OutArgument>
                                  </Assign.To>
                                  <Assign.Value>
                                    <InArgument x:TypeArguments="scg:List(x:Int32)">[New List(Of Int32) From {i}]</InArgument>
                                  </Assign.Value>
                                </Assign>
                              </If.Else>
                            </If>
                          </Sequence>
                        </If.Then>
                        <If.Else>
                          <Sequence DisplayName="Else" sap:VirtualizedContainerService.HintSize="416,90" sap2010:WorkflowViewState.IdRef="Sequence_8">
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                          </Sequence>
                        </If.Else>
                      </If>
                    </Sequence>
                  </ActivityAction>
                </ui:ForEach.Body>
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
              </ui:ForEach>
            </Sequence>
          </ActivityAction>
        </ui:ForEach.Body>
      </ui:ForEach>
      <Sequence sap2010:Annotation.AnnotationText="We need to check if declared IPAFFs certificate numbers and the certificate numbers present in the PDF match.&#xA;&#xA;We must check if there are extra certificate numbers either -&#xA;&#xA;A) Declared in IPAFFS and not present in the PDF.&#xA;or&#xA;B) Not declared in IPAFFS, but are present in the PDF.&#xA;&#xA;The two lists should match exactly, so if we compare them and remove any matches then this should leave two empty lists. If any values are left on either side of the comparison, these are extra certificate numbers." DisplayName="Check for Excess Certificate Numbers" sap:VirtualizedContainerService.HintSize="672,1289" sap2010:WorkflowViewState.IdRef="Sequence_29">
        <Sequence.Variables>
          <Variable x:TypeArguments="scg:List(x:String)" Name="listPhytoCertNosComparison">
            <Variable.Default>
              <VisualBasicValue x:TypeArguments="scg:List(x:String)" ExpressionText="New List(Of String)" />
            </Variable.Default>
          </Variable>
        </Sequence.Variables>
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
        <Assign sap2010:Annotation.AnnotationText="We cannot delete the item from a List whilst looping around that same List so we must first take a duplicate of the IPAFFS Certificate Number list." DisplayName="Assign Comparison List" sap:VirtualizedContainerService.HintSize="502,175" sap2010:WorkflowViewState.IdRef="Assign_23">
          <Assign.To>
            <OutArgument x:TypeArguments="scg:List(x:String)">[listPhytoCertNosComparison]</OutArgument>
          </Assign.To>
          <Assign.Value>
            <InArgument x:TypeArguments="scg:List(x:String)">[listIPAFFSPhytoCertNos.ToList]</InArgument>
          </Assign.Value>
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
        </Assign>
        <ui:ForEach x:TypeArguments="x:String" CurrentIndex="{x:Null}" DisplayName="For Each PDF Certificate Number" sap:VirtualizedContainerService.HintSize="502,818" sap2010:WorkflowViewState.IdRef="ForEach`1_7" Values="[listPhytoCertNosComparison]">
          <ui:ForEach.Body>
            <ActivityAction x:TypeArguments="x:String">
              <ActivityAction.Argument>
                <DelegateInArgument x:TypeArguments="x:String" Name="CertificateNumber" />
              </ActivityAction.Argument>
              <Sequence DisplayName="Body" sap:VirtualizedContainerService.HintSize="468,680" sap2010:WorkflowViewState.IdRef="Sequence_30">
                <Sequence.Variables>
                  <Variable x:TypeArguments="x:String" Name="strCertificateNumber" />
                </Sequence.Variables>
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <Assign sap2010:Annotation.AnnotationText="The Filter Collection activity doesn't seem to be able to grab the CertificateNumber variable straight from the For Each, so have to assign it to a temporary variable instead. " DisplayName="Assign strCertificateNumber" sap:VirtualizedContainerService.HintSize="434,175" sap2010:WorkflowViewState.IdRef="Assign_24">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:String">[strCertificateNumber]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:String">[CertificateNumber]</InArgument>
                  </Assign.Value>
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                </Assign>
                <uasc:FilterCollection x:TypeArguments="x:String" Collection="[listPDFPhytoCertNos]" DisplayName="Filter Collection - PDF Numbers" FilterAction="RemoveMatchingElements" sap:VirtualizedContainerService.HintSize="434,227" sap2010:WorkflowViewState.IdRef="FilterCollection`1_3">
                  <uasc:FilterCollection.Filter>
                    <uascf:CollectionFilterSettings LogicalOperator="And">
                      <uascf:CollectionFilterSettings.Filters>
                        <scg:List x:TypeArguments="uascf:Filter" Capacity="4">
                          <uascf:Filter x:TypeArguments="x:String" Criteria="CurrentItem" Value="[strCertificateNumber]">
                            <uascf:Filter.Operator>
                              <uascf:ContainsOperator x:Name="__ReferenceID0" />
                            </uascf:Filter.Operator>
                          </uascf:Filter>
                        </scg:List>
                      </uascf:CollectionFilterSettings.Filters>
                    </uascf:CollectionFilterSettings>
                  </uasc:FilterCollection.Filter>
                </uasc:FilterCollection>
                <uasc:FilterCollection x:TypeArguments="x:String" Collection="[listIPAFFSPhytoCertNos]" DisplayName="Filter Collection - IPAFFS Numbers" FilterAction="RemoveMatchingElements" sap:VirtualizedContainerService.HintSize="434,218" sap2010:WorkflowViewState.IdRef="FilterCollection`1_4">
                  <uasc:FilterCollection.Filter>
                    <uascf:CollectionFilterSettings LogicalOperator="And">
                      <uascf:CollectionFilterSettings.Filters>
                        <scg:List x:TypeArguments="uascf:Filter" Capacity="4">
                          <uascf:Filter x:TypeArguments="x:String" Operator="{x:Reference __ReferenceID0}" Criteria="CurrentItem" Value="[strCertificateNumber]" />
                        </scg:List>
                      </uascf:CollectionFilterSettings.Filters>
                    </uascf:CollectionFilterSettings>
                  </uasc:FilterCollection.Filter>
                </uasc:FilterCollection>
              </Sequence>
            </ActivityAction>
          </ui:ForEach.Body>
        </ui:ForEach>
      </Sequence>
      <If Condition="[listIPAFFSPhytoCertNos.Count &gt; 0]" DisplayName="Any Remaining IPAFFS Numbers?" sap:VirtualizedContainerService.HintSize="672,487" sap2010:WorkflowViewState.IdRef="If_3">
        <If.Then>
          <Sequence DisplayName="Then" sap:VirtualizedContainerService.HintSize="416,226" sap2010:WorkflowViewState.IdRef="Sequence_15">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="382,166" sap2010:WorkflowViewState.IdRef="LogMessage_1" Level="Warn" Message="[&quot;Add logic for: On hold - Cert declared on IPAFFS not found in PDF&quot;]" />
          </Sequence>
        </If.Then>
        <If.Else>
          <Sequence DisplayName="Else" sap:VirtualizedContainerService.HintSize="416,90" sap2010:WorkflowViewState.IdRef="Sequence_16">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </Sequence>
        </If.Else>
      </If>
      <If Condition="[listPDFPhytoCertNos.Count &gt; 0]" DisplayName="Any Remaining PDF Numbers?" sap:VirtualizedContainerService.HintSize="672,478" sap2010:WorkflowViewState.IdRef="If_6">
        <If.Then>
          <Sequence DisplayName="Then" sap:VirtualizedContainerService.HintSize="416,226" sap2010:WorkflowViewState.IdRef="Sequence_31">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="382,166" sap2010:WorkflowViewState.IdRef="LogMessage_4" Level="Warn" Message="[&quot;Add logic for: On hold - Cert found in PDF not declared on IPAFFS&quot;]" />
          </Sequence>
        </If.Then>
        <If.Else>
          <Sequence DisplayName="Else" sap:VirtualizedContainerService.HintSize="416,90" sap2010:WorkflowViewState.IdRef="Sequence_32">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </Sequence>
        </If.Else>
      </If>
    </Sequence>
  </Sequence>
</Activity>